version: 2
general:
  branches:
    only:
      - master # list of branches to build
      - wip

# defaults: &defaults
#   working_directory: ~/repo # /root/project
#   docker:
#     - image: circleci/ruby:2.4.2-jessie-node-browsers
#       environment:
#         PGHOST: 127.0.0.1
#         PGUSER: loot_user
#         RAILS_ENV: test
#     - image: circleci/postgres:9.5-alpine
#       environment:
#         POSTGRES_USER: loot_user
#         POSTGRES_DB: loot_test
#         POSTGRES_PASSWORD: ""
#### use <<: *defaults under job to use default

jobs:
  init:
    # working_directory: ~/repo
    docker:
      - image: $DOCKER_ADD/js-base-image:latest

    # working_directory: ~/repo
    # Needed to build docker as you use . # Default is /root/project

    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "package.json" }}
            - v1-dependencies-  # fallback to using the latest cache if no exact match is found
      - run: npm ci --production # Have to run it again as the image does not seem to have node_module when used as a base image..
      - run: npx snyk test --severity-threshold=high
      - save_cache:
          key: v1-dependencies-{{ checksum "package.json" }}
          paths:
            - node_modules

  test:
    # working_directory: /js-base-image
    # default is Default is /root/project
    docker:
      - image: $DOCKER_ADD/js-base-image:latest
    steps:
      - checkout
      - run:
          name: Copy project dir under js-base-image for testing
          command: mkdir -p /js-base-image/project && cp -r . /js-base-image/project/
      - run:
          name: Run test and save coverage result
          command: |
            cd /js-base-image/project && npm ci --production
            /js-base-image/cc-test-reporter before-build
            cd /js-base-image/project && npm run test:ci
            # upload test report to Code Climate using `after-build`
            cd /js-base-image/project && /js-base-image/cc-test-reporter after-build --coverage-input-type lcov --exit-code $? # Providing this will prevent sending test coverage results for failed tests.
          no_output_timeout: 20m
      - store_test_results:
          path: /js-base-image/project/coverage/
      - store_artifacts:
          path: /js-base-image/project/coverage/

  test:e2e:
    docker:
      - image: $DOCKER_ADD/js-base-image:latest
    steps:
      - checkout
      - run:
          name: Install Docker client
          command: |
            set -x
            VER="17.03.0-ce"
            curl -L -o /tmp/docker-$VER.tgz https://download.docker.com/linux/static/stable/x86_64/docker-$VER.tgz
            tar -xz -C /tmp -f /tmp/docker-$VER.tgz
            mv /tmp/docker/* /usr/bin

      - setup_remote_docker:
          docker_layer_caching: true

      - run:
          name: Docker login and build
          command: |
            eval "$(aws ecr get-login --no-include-email --region ap-northeast-1)"
            docker build -t $REPO_NAME .

      - run:
          name: create network
          command: docker network create -d bridge --subnet 10.0.0.1/24 docker-bridge

      - run:
          name: start service in bg
          command: docker run --network docker-bridge --ip 10.0.0.10 $REPO_NAME # Fixed at 10.0.0.10
          background: true

      # -v wont work for remote docker, use cp instead => https://circleci.com/docs/2.0/building-docker-images/#mounting-folders
      # create a dummy container which will hold a volume with config
      - run:
          name: create network
          command: |
            docker create -v /tests --name test-e2e-vol alpine:3.4 /bin/true
            # copy a config file into this volume
            docker cp /root/project/test-e2e test-e2e-vol:/tests
            # start an application container using this volume
            docker run -e NODE_ENV=production -e TEST_EMAIL=$TEST_EMAIL -e TEST_PASSWORD=$TEST_PASSWORD --network docker-bridge --volumes-from test-e2e-vol testcafe/testcafe 'chromium:headless --no-sandbox' /tests # -r xunit:/tmp/test-results/res.xml if you want to save the artifact

  push-deploy:
    docker:
      - image: circleci/python:3.7

    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run: sudo apt-get install python-dev
      - run: sudo pip install awscli
      - run:
          name: Docker login
          command: eval "$(aws ecr get-login --no-include-email --region ap-northeast-1)"

      - run:
          name: Building the image and push to ecr
          command: | # Need | to run line by line
            TAG=latest
            docker build -t $REPO_NAME .
            docker tag $REPO_NAME:$TAG $DOCKER_ADD/$REPO_NAME:$TAG
            docker push $DOCKER_ADD/$REPO_NAME:$TAG

      - run:
          name: Logging into ec2 and update the k8s
          command: |
            # environment var wont work because it is in an embedded script
            if [ -z "$NOT_DEPLOY_K8S" ]; then # Not set is -z, set is -n
              ssh -o StrictHostKeyChecking=no $SSH_USER@$SSH_HOST "kubectl delete -f k8s/'${REPO_K8S_FOLDER}'/'${REPO_NAME}'.yml && kubectl create -f k8s/'${REPO_K8S_FOLDER}'/'${REPO_NAME}'.yml" # If get long, get a file
            fi

workflows:
  version: 2
  build-deploy:
    jobs:
      - init
      - test:
          requires:
            - init
      - test:e2e:
          requires:
            - init
      - push-deploy:
          requires:
            - test
            - test:e2e
